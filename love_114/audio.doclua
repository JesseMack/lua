local BASE_URL = "https://love2d.org"

--- Quickhelp Documentation (ctrl-J)
-- This is called when the user invokes quick help via ctrl-j, or by
-- having the quickhelp panel open and set to autolookup
-- @param name The name to get documentation for.
-- @return the documentation as an HTML or plain text string
function getDocumentation(name)
    -- Use for development
    -- disableCache()

    local data = fetchURL(getDocumentationUrl(name))

    local contentTag = [[<div id="bodyContent">]]
    local footerTag = [[<div class="printfooter]]

    local contentPos = data:find(contentTag)
    local footerPos = data:find(footerTag)

    if contentPos == nil then
        return "<html><h3>" .. name .. "</h3>Could not load from Love wiki.<br><br><b>[data from love2d.org]</b></html>"
    end

    data = data:sub(contentPos, footerPos)

    data =  data:gsub([[href="]], [[href="]]..BASE_URL)
    data =  data:gsub([[src="]], [[src="]]..BASE_URL)

    data = "<html><h3>" .. name .. "</h3>" .. data .. "<br><br><b>[data from love2d.org]</b></html>"

    return data
end

--- External Documentation URL (shift-F1)
-- This is called by shift-F1 on the symbol, or by the
-- external documentation button on the quick help panel
-- @param name The name to get documentation for.
-- @return the URL of the external documentation
function getDocumentationUrl(name)
    return BASE_URL .. "/wiki/" .. name
end


--- Quick Navigation Tooltip Text, (ctrl-hover on symbol)
-- This is called when the user ctrl-hovers over a symbol
-- @param name The name to get documentation for.
-- @return the documentation as a plain text string
function getQuickNavigateDocumentation(name)
    local sig = SIGNATURES[name]
    if not sig then return name end
    return SIGNATURES[name]
end


SIGNATURES = {
["love.audio"] = [=[love.audio - Provides an interface to create noise with the user's speakers.]=],
["love.audio.getActiveEffects"] = [=[getActiveEffects() - Gets a list of the names of the currently enabled effects.]=],
["love.audio.getActiveSourceCount"] = [=[getActiveSourceCount() - Gets the current number of simultaneously playing sources.]=],
["love.audio.getDistanceModel"] = [=[getDistanceModel() - Returns the distance attenuation model.]=],
["love.audio.getDopplerScale"] = [=[getDopplerScale() - Gets the current global scale factor for velocity-based doppler effects.]=],
["love.audio.getEffect"] = [=[getEffect(name) - Gets the settings associated with an effect.]=],
["love.audio.getMaxSceneEffects"] = [=[getMaxSceneEffects() - Gets the maximum number of active effects supported by the system.]=],
["love.audio.getMaxSourceEffects"] = [=[getMaxSourceEffects() - Gets the maximum number of active Effects in a single Source object, that the system can support.]=],
["love.audio.getOrientation"] = [=[getOrientation() - Returns the orientation of the listener.]=],
["love.audio.getPosition"] = [=[getPosition() - Returns the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.]=],
["love.audio.getRecordingDevices"] = [=[getRecordingDevices() - Gets a list of RecordingDevices on the system.

The first device in the list is the user's default recording device. The list may be empty if there are no microphones connected to the system.

Audio recording is currently not supported on iOS.]=],
["love.audio.getSourceCount"] = [=[getSourceCount() - Gets the current number of simultaneously playing sources.]=],
["love.audio.getVelocity"] = [=[getVelocity() - Returns the velocity of the listener.]=],
["love.audio.getVolume"] = [=[getVolume() - Returns the master volume.]=],
["love.audio.isEffectsSupported"] = [=[isEffectsSupported() - Gets whether audio effects are supported in the system.]=],
["love.audio.newQueueableSource"] = [=[newQueueableSource(samplerate, bitdepth, channels, buffercount) - Creates a new Source usable for real-time generated sound playback with Source:queue.]=],
["love.audio.newSource"] = [=[newSource(filename, type) - Creates a new Source from a filepath, File, Decoder or SoundData.

Sources created from SoundData are always static.]=],
["love.audio.pause"] = [=[pause() - Pauses specific or all currently played Sources.]=],
["love.audio.play"] = [=[play(source) - Plays the specified Source.]=],
["love.audio.setDistanceModel"] = [=[setDistanceModel(model) - Sets the distance attenuation model.]=],
["love.audio.setDopplerScale"] = [=[setDopplerScale(scale) - Sets a global scale factor for velocity-based doppler effects. The default scale value is 1.]=],
["love.audio.setEffect"] = [=[setEffect(name, settings) - Defines an effect that can be applied to a Source.

Not all system supports audio effects. Use love.audio.isEffectsSupported to check.]=],
["love.audio.setMixWithSystem"] = [=[setMixWithSystem(mix) - Sets whether the system should mix the audio with the system's audio.]=],
["love.audio.setOrientation"] = [=[setOrientation(fx, fy, fz, ux, uy, uz) - Sets the orientation of the listener.]=],
["love.audio.setPosition"] = [=[setPosition(x, y, z) - Sets the position of the listener, which determines how sounds play.]=],
["love.audio.setVelocity"] = [=[setVelocity(x, y, z) - Sets the velocity of the listener.]=],
["love.audio.setVolume"] = [=[setVolume(volume) - Sets the master volume.]=],
["love.audio.stop"] = [=[stop() - Stops currently played sources.]=],
}
